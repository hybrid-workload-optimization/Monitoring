#server.port=8000

#spring.kafka.consumer.bootstrap-servers: serverless04-vm02:9092,serverless04-vm03:9092,serverless04-vm04:9092
#spring.kafka.consumer.group-id: tomcat_group_id
#spring.kafka.consumer.auto-offset-reset: earliest
#spring.kafka.consumer.key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#spring.kafka.consumer.properties.spring.json.trusted.packages=*
#spring.kafka.properties.spring.json.value.default.type: com.sptek.kafka.model.TomcatLogInfo

# [Thread Pool] #
spring.threadpool.name = Sptek Thread Pool
spring.threadpool.init.size = 100
spring.threadpool.max.size = 100
spring.threadpool.queue.capacity = 1

kafka.bootstrapAddress=172.16.11.232:9092,172.16.11.233:9092,172.16.11.234:9092
topic.name=bmt
task.document.count=200000

node.ip=0.0.0.0

# 메시지를 분산시켜서, 높은 처리량을 갖도록 구성하기 위해 그룹 생성
#topic.group.id=bmt_group_id  


#spring.data.mongodb.uri=mongodb://172.16.11.246:27017/sptek_loggg?retryWrites=false


#mongodb
#spring.data.mongodb.host=172.16.11.246
#spring.data.mongodb.port=27017
#spring.data.mongodb.database=sptek_log
#spring.data.mongodb.auto-index-creation=true

# 트랜잭션 처리  (디폴트 : 싱글 DB) Writes=false 해야지 정상 작동
#spring.data.mongodb.uri=mongodb://172.16.11.246:27017/sptek_log?retryWrites=false
#spring.data.mongodb.uri=mongodb://172.16.11.246:27017/sptek_log?retryWrites=false



# Mongo DB #
#spring.data.mongodb.authentication-database=admin
#spring.data.mongodb.username=psk
#spring.data.mongodb.password=psk
#spring.data.mongodb.database=psk
#spring.data.mongodb.port=27017
#spring.data.mongodb.host=localhost
#spring.data.mongodb.auto-index-creation=true
